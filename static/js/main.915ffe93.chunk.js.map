{"version":3,"sources":["images/github.svg","theme.js","components/common/Button.js","components/common/Logo.js","components/AppBar/AppBarStyles.js","components/AppBar/AppBar.js","components/Main/StyledCard.js","components/Main/Main.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","theme","color","primary","lightGray","darkGray","dark","white","lightBorder","concat","Button","styled","button","_templateObject","wobble","keyframes","Logo_templateObject","Logo","img","_templateObject2","StyledAppBar","div","AppBarStyles_templateObject","_ref","AppBar","AppBarStyles_templateObject2","_ref2","_ref3","_ref4","_ref5","render","react_default","a","createElement","href","src","GH_LOGO","Component","rowHeight","rowGap","StyledCard","StyledCard_templateObject","span","StyledContent","StyledCard_templateObject2","StyledImg","_templateObject3","Card","state","componentDidMount","_this","resizeGridCard","window","addEventListener","content","refs","props","post","id","contentHeight","getBoundingClientRect","height","rowSpan","Math","ceil","setState","_this$props$post","imgUrl","ref","className","alt","name","StyledMain","Main_templateObject","sleep","ms","arguments","length","undefined","Promise","r","setTimeout","Main","loading","toggleLoading","then","renderPosts","posts","map","i","Main_StyledCard","key","App","react","components_AppBar_AppBar","components_Main_Main","APP_WITH_THEME","styled_components_browser_esm","src_App","document","title","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.915ffe93.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.f5a069d2.svg\";","const primary = '#d7051c';\r\nconst lightGray = '#eee';\r\nconst darkGray = '#8d8d8d';\r\nconst dark = '#1d1d1d';\r\nconst white = '#fff';\r\n\r\nexport default {\r\n  color: {\r\n    primary,\r\n    lightGray,\r\n    darkGray,\r\n    dark,\r\n    white\r\n  },\r\n  lightBorder: `2px solid ${lightGray}`\r\n};\r\n","import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  border-radius: 3px;\r\n  outline: none;\r\n  width: 6em;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  padding: 7px;\r\n  font-size: 20px;\r\n`;\r\n\r\nexport { Button };\r\n","import styled, { keyframes } from 'styled-components';\r\n\r\nconst wobble = keyframes`\r\n  0% { transform: rotate(0deg) }\r\n  25% { transform: rotate(-30deg) }\r\n  50% { transform: rotate(30deg) }\r\n  75% { transform: rotate(-30deg) }\r\n  100% { transform: rotate(0deg) }\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  width: 50px;\r\n  height: 50px;\r\n  cursor: pointer;\r\n  &:hover {\r\n    animation: ${wobble} 1s;\r\n  }\r\n`;\r\n\r\nexport { Logo };\r\n","import styled from 'styled-components';\r\nimport { Button } from '../common';\r\n\r\nconst StyledAppBar = styled.div`\r\n  width: 100%;\r\n  border: ${({ theme }) => theme.lightBorder};\r\n  padding: 10px;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  color: ${({ theme }) => theme.color.dark};\r\n  background: ${({ theme }) => theme.color.white};\r\n  border: ${({ theme }) => theme.lightBorder};\r\n  &:hover {\r\n    background: ${({ theme }) => theme.color.lightGray};\r\n  }\r\n`;\r\n\r\nexport { StyledAppBar, StyledButton };\r\n","import React, { Component } from 'react';\r\nimport { GH_LOGO } from './../../images';\r\n// components\r\nimport { Logo } from '../common';\r\nimport { StyledAppBar } from './AppBarStyles';\r\n\r\nclass AppBar extends Component {\r\n  render = () => {\r\n    return (\r\n      <StyledAppBar>\r\n        <p>React Masonry - resize me!</p>\r\n        <a href=\"https://github.com/ryasan86/masonry\">\r\n          <Logo src={GH_LOGO} />\r\n        </a>\r\n      </StyledAppBar>\r\n    );\r\n  };\r\n}\r\n\r\nexport default AppBar;\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst rowHeight = 40;\r\nconst rowGap = 10;\r\n\r\nconst StyledCard = styled.div`\r\n  grid-row-end: span ${({ span }) => span};\r\n`;\r\n\r\nconst StyledContent = styled.div``;\r\n\r\nconst StyledImg = styled.img`\r\n  width: 100%;\r\n  border-radius: 10px;\r\n`;\r\n\r\nclass Card extends Component {\r\n  state = {\r\n    span: 0\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.resizeGridCard();\r\n    window.addEventListener('resize', this.resizeGridCard);\r\n  };\r\n\r\n  resizeGridCard = () => {\r\n    const content = this.refs[`content${this.props.post.id}`];\r\n    if (content) {\r\n      const contentHeight = content.getBoundingClientRect().height;\r\n      const rowSpan       = Math.ceil((contentHeight + rowGap) / (rowHeight + rowGap));\r\n      this.setState({ span: rowSpan });\r\n    }\r\n  };\r\n\r\n  render = () => {\r\n    const { post: { id, imgUrl } } = this.props;\r\n\r\n    return (\r\n      <StyledCard span={this.state.span}>\r\n        <StyledContent ref={`content${id}`} className=\"content\">\r\n          <StyledImg src={imgUrl} alt={id} name={id} />\r\n          <div>\r\n            <p>Lorem ipsum dolor sit amet</p>\r\n          </div>\r\n        </StyledContent>\r\n      </StyledCard>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport posts from './../../data.json';\r\n// import { resizeAllGridItems } from './utils';\r\nimport Card from './StyledCard';\r\n\r\nconst rowHeight = 40;\r\nconst rowGap = 10;\r\n\r\nconst StyledMain = styled.div`\r\n  padding: 2% 4% 2% 4%;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n  grid-gap: ${rowGap}px;\r\n  grid-auto-rows: ${rowHeight}px;\r\n`;\r\n\r\nconst sleep = (ms = 0) => new Promise(r => setTimeout(r, ms));\r\n\r\nclass Main extends Component {\r\n  state = {\r\n    loading: false\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.toggleLoading();\r\n    sleep(750).then(this.toggleLoading); // simulate delay\r\n  };\r\n\r\n  toggleLoading = () => {\r\n    this.setState({ loading: !this.state.loading });\r\n  };\r\n\r\n  renderPosts = () => {\r\n    return posts.map((post, i) => <Card key={i} post={post} />);\r\n  };\r\n\r\n  render = () => {\r\n    return (\r\n      <StyledMain>\r\n        {this.state.loading ? 'LOADING...' : this.renderPosts()}\r\n      </StyledMain>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component, Fragment } from 'react';\nimport AppBar from './components/AppBar/AppBar';\nimport Main from './components/Main/Main';\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <AppBar />\n        <Main />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// theme provider\nimport { ThemeProvider } from 'styled-components';\nimport theme from './theme';\n// components\nimport App from './App';\n\nconst APP_WITH_THEME = (\n  <ThemeProvider theme={theme}>\n    <App />\n  </ThemeProvider>\n);\n\ndocument.title = 'React Masonry';\nReactDOM.render(APP_WITH_THEME, document.getElementById('root'));\n"],"sourceRoot":""}